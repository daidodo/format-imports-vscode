{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "JSON schema for JS/TS Import/Export Sorter configuration",
  "type": "object",
  "properties": {
    "autoFormat": {
      "type": "string",
      "enum": ["off", "onSave"],
      "default": "onSave",
      "description": "When to auto format imports/exports."
    },
    "formatExports": {
      "type": "boolean",
      "default": true,
      "description": "Whether to format exports as well."
    },
    "exclude": {
      "type": "array",
      "default": ["node_modules"],
      "items": { "type": "string" },
      "uniqueItems": true,
      "description": "Disable formatting for files matching regular expressions."
    },
    "excludeGlob": {
      "type": "array",
      "default": [],
      "items": { "type": "string" },
      "uniqueItems": true,
      "description": "Disable formatting for files matching glob patterns."
    },
    "sortImportsBy": {
      "$ref": "#/$def/sortImportsBy"
    },
    "groupRules": {
      "$ref": "#/$def/groupRules",
      "default": ["^react(-dom)?$", "^@angular/", "^vue$", {}, "^[@]", "^[.]"],
      "markdownDescription": "Grouping rules for path patterns for imports. See the [wiki](https://github.com/daidodo/tsimportsorter/wiki/Grouping-Rules) for more details."
    },
    "sortRules": {
      "$ref": "#/$def/sortRules",
      "default": {
        "paths": ["_", "aA"],
        "names": ["_", "aA"]
      }
    },
    "keepUnused": {
      "type": "array",
      "default": [],
      "items": { "$ref": "#/$def/keepUnusedRule" },
      "markdownDescription": "By default all unused imports are removed. Keep some or all them around with this setting if you need."
    },
    "maxBindingNamesPerLine": {
      "type": "integer",
      "minimum": 0,
      "default": 1,
      "description": "Max binding names per line before wrapping for imports. 0 for no limit."
    },
    "maxDefaultAndBindingNamesPerLine": {
      "type": "integer",
      "minimum": 0,
      "default": 2,
      "description": "Max default and binding names per line before wrapping for imports. 0 for no limit."
    },
    "maxExportNamesPerLine": {
      "type": "integer",
      "minimum": 0,
      "default": 0,
      "description": "Max binding names per line before wrapping for exports. 0 for no limit."
    },
    "maxNamesPerWrappedLine": {
      "type": "integer",
      "minimum": 0,
      "default": 1,
      "description": "Max names on wrapped lines for imports/exports. 0 for no limit."
    },
    "EmptyLinesBetweenGroups": {
      "type": "integer",
      "minimum": 0,
      "default": 1,
      "description": "Number of empty lines between groups (NOT sub-groups)."
    },
    "emptyLinesAfterAllImports": {
      "type": "integer",
      "minimum": 0,
      "default": 1,
      "description": "Number of empty lines after all import statements."
    },
    "maxLineLength": {
      "type": "integer",
      "minimum": 0,
      "default": 80,
      "description": "Max line length before wrapping. 0 for no limit."
    },
    "tabType": {
      "type": "string",
      "enum": ["tab", "space"],
      "default": "space",
      "description": "Indent lines with tabs or spaces."
    },
    "tabSize": {
      "type": "integer",
      "minimum": 0,
      "default": 2,
      "description": "Number of spaces to replace a TAB."
    },
    "quoteMark": {
      "type": "string",
      "enum": ["single", "double"],
      "default": "single",
      "description": "Use single or double quotes."
    },
    "trailingComma": {
      "type": "string",
      "enum": ["none", "multiLine"],
      "default": "multiLine",
      "description": "When to add trailing commas for the last name."
    },
    "hasSemicolon": {
      "type": "boolean",
      "default": true,
      "description": "Whether to add semicolons at the end of statements."
    },
    "insertFinalNewline": {
      "type": "boolean",
      "default": true,
      "description": " Whether to end files with a new line."
    },
    "bracketSpacing": {
      "type": "boolean",
      "default": true,
      "description": "Whether to add spaces between brackets. true for '{ id }' and false for '{id}'."
    }
  },
  "$def": {
    "sortSegment": { "type": "string", "enum": ["az", "AZ", "aA", "Aa", "_"] },
    "sortSegments": {
      "type": "array",
      "items": { "$ref": "#/$def/sortSegment" },
      "uniqueItems": true
    },
    "sortRule": {
      "oneOf": [{ "type": "string", "enum": ["none"] }, { "$ref": "#/$def/sortSegments" }]
    },
    "sortRules": {
      "type": "object",
      "properties": {
        "paths": {
          "$ref": "#/$def/sortRule",
          "markdownDescription": "Sorting rule for import paths. See the [wiki](https://github.com/daidodo/tsimportsorter/wiki/Sorting-Rules) for more details."
        },
        "names": {
          "$ref": "#/$def/sortRule",
          "markdownDescription": "Sorting rule for imported/exported names. See the [wiki](https://github.com/daidodo/tsimportsorter/wiki/Sorting-Rules) for more details."
        }
      }
    },
    "flagSymbol": {
      "type": "string",
      "enum": ["all", "scripts", "named", "multiple", "single", "namespace"],
      "description": "Type of imports."
    },
    "groupRule": {
      "oneOf": [
        { "type": "string" },
        { "$ref": "#/$def/groupRules" },
        {
          "type": "object",
          "properties": {
            "flags": {
              "oneOf": [
                {
                  "$ref": "#/$def/flagSymbol",
                  "description": "Type of imports supported by this group."
                },
                {
                  "type": "array",
                  "items": { "$ref": "#/$def/flagSymbol" },
                  "uniqueItems": true,
                  "description": "Types of imports supported by this group."
                }
              ]
            },
            "regex": { "type": "string", "description": "Import path pattern." },
            "sortImportsBy": { "$ref": "#/$def/sortImportsBy" },
            "sort": { "$ref": "#/$def/sortRules", "description": "Sorting rules for this group." },
            "subGroups": { "$ref": "#/$def/groupRules", "description": "Sub-groups and rules." }
          }
        }
      ]
    },
    "groupRules": {
      "type": "array",
      "items": { "$ref": "#/$def/groupRule" },
      "uniqueItems": true
    },
    "keepUnusedRule": {
      "oneOf": [
        { "type": "string" },
        {
          "type": "object",
          "properties": {
            "path": { "type": "string", "description": "Import path pattern to keep" },
            "names": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Import names of matching path to keep"
            }
          }
        }
      ]
    },
    "sortImportsBy": {
      "type": "string",
      "enum": ["paths", "names"],
      "default": "paths",
      "description": "Sort import statements by paths or first names."
    }
  }
}
